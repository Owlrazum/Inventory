[CustomEditor(typeof(AbilityData))]
public class AbilityEditor : Editor
{
    SerializedProperty cooldown;
    SerializedProperty range;
    SerializedProperty effects;
    SerializedProperty showEffects;

    private void OnEnable ()
    {
        // Link up the serialized fields you will access
        cooldown = serializedObject.FindProperty(nameof(AbilityData.cooldown)); 
        range = serializedObject.FindProperty(nameof(AbilityData.range)); 
        effects = serializedObject.FindProperty(nameof(AbilityData.effects));
        showEffects = serializedObject.FindProperty(nameof(AbilityData.showEffects));
    }

    public override void OnInspectorGUI()
    {
        // refresh current actual values into the editor
        serializedObject.Update();

        DrawDetails();
        DrawEffects();

        // write back any changed values from the editor back to the actual object
        // This handles all marking dirty, saving and handles Undo/Redo
        serializedObject.ApplyModifiedProperties();
    }

    private void DrawEffects()
    {
        // Now always ever only read and set values via the SerializedPropertys

        EditorGUILayout.Space();
        showEffects.boolValue = EditorGUILayout.Foldout(showEffects.boolValue, effects.displayName, true);

        if (showEffects.boolValue)
        {
            EditorGUI.indentLevel++;

            // This already handles all the list drawing by default
            EditorGUILayout.PropertyField(effects, GUIContent.none, true);
            EditorGUI.indentLevel--;
        }
    }
        
    private void DrawDetails()
    {
        EditorGUILayout.LabelField("Details");
        EditorGUILayout.Space();

        EditorGUILayout.BeginHorizontal();
        EditorGUILayout.LabelField(cooldown.displayName, GUILayout.MaxWidth(60));
        cooldown.intValue = EditorGUILayout.IntField(cooldown.intValue);
        EditorGUILayout.LabelField(range.displayName, GUILayout.MaxWidth(40));
        range.intValue = EditorGUILayout.IntField(range.intValue);
        EditorGUILayout.EndHorizontal();
    }
}